{ns zen.fhir

 version
 {:zen/tags #{zen/schema zen/tag version}
  :type zen/map
  :zen.fhir/version "0.5.8"
  :require #{:zen.fhir/version}
  :keys {:zen.fhir/version {:type zen/string
                            :regex "^0\\.5\\.(8|9|[1-9][0-9]+)(-.*)?$"}}}

 Resource
 {:zen/tags #{zen/tag zen/schema}
  :type zen/map
  :keys {:resourceType {:type zen/string}
         :id {:type zen/string}
         :meta {:type zen/map :values {:type zen/any}}}}

 Reference
 {:zen/tags #{zen/schema}
  :zen/desc "reference datatype"
  :type zen/map
  :keys {:id {:type zen/string}
         :resourceType {:type zen/string}
         :display {:type zen/string}
         :localRef {:type zen/string}
         :uri {:type zen/string}}}

 value-set
 {:zen/tags #{zen/schema zen/tag}
  :zen/desc "Value set"
  :confirms #{version}
  :type zen/map
  :keys {:zendoc {:type zen/string}
         :zen.fhir/id {:type zen/string}
         :zen.fhir/name {:type zen/string}
         :zen.fhir/title {:type zen/string}
         :zen.fhir/status {:type zen/string
                           :enum [{:value "active"}
                                  {:value "draft"}
                                  {:value "retired"}
                                  {:value "unknown"}]}
         :zen.fhir/oid {:type zen/string}
         :zen.fhir/compose {:type zen/map
                            :keys {:include {:type zen/vector
                                             :every {:type zen/map
                                                     :keys {:system {:type zen/string}
                                                            :concept {:type zen/vector
                                                                      :every {:type zen/map
                                                                              :keys {:code {:type zen/string}
                                                                                     :display {:type zen/string}
                                                                                     :short {:type zen/string}}}}}}}}}
         :uri {:type zen/string}
         :fhir/code-systems {:type zen/set
                             :every {:type zen/map
                                     :require #{:fhir/url}
                                     :keys {:fhir/url {:type zen/string}
                                            :zen.fhir/content {:type zen/keyword
                                                               :enum [{:value :bundled}
                                                                      {:value :not-present}]}}}}
         :version {:type zen/string}}}

 naming-system
 {:zen/tags #{zen/schema zen/tag}
  :zen/desc "Naming System"
  :type zen/map
  :require #{:zen.fhir/uniqueId}
  :keys {:zendoc {:type zen/string}
         :zen.fhir/id {:type zen/string}
         :zen.fhir/name {:type zen/string}
        ;;  :zen.fhir/title {:type zen/string}
         :zen.fhir/status {:type zen/string
                           :enum [{:value "active"}
                                  {:value "draft"}
                                  {:value "retired"}
                                  {:value "unknown"}]}
         :zen.fhir/kind {:type zen/string
                         :enum [{:value "codesystem"}
                                {:value "identifier"}
                                {:value "root"}]}
         :zen.fhir/date {:type zen/datetime}
         :zen.fhir/publisher {:type zen/string}
         :zen.fhir/contact {:type zen/vector
                            :every {:type zen/map
                                    :confirms #{fhir/ContactDetail}}}
         :zen.fhir/responsible {:type zen/string}
         :zen.fhir/type {:type zen/map
                         :confirms #{fhir/CodeableConcept}}
         :zen.fhir/useContext {:type zen/vector
                               :every {:type zen/map
                                       :confirms #{fhir/UsageContext}}}
         :zen.fhir/jurisdiction {:type zen/vector
                                 :every {:type zen/map
                                         :confirms #{fhir/CodeableConcept}}}
         :zen.fhir/usage {:type zen/string}
         :zen.fhir/uniqueId {:type zen/vector
                             :minItems 1
                             :every {:type zen/map
                                     :require #{:type :value}
                                     :confirms #{fhir/BackboneElement}
                                     :keys {:type {:type zen/string}
                                            :value {:type zen/string}
                                            :preferred {:type zen/boolean}
                                            :comment {:type zen/string}
                                            :period {:type zen/map
                                                     :confirms #{fhir/Period}}}}}}}

 nested-schema
 {:zen/tags #{zen/schema}
  :type zen/map
  :keys {:fhir/flags {:type zen/set}
         :fhir/extensionUri {:type zen/string}
         :fhir/polymorphic {:type zen/boolean}
         :zen.fhir/reference {:type zen/map
                              :keys {:refers {:type zen/set
                                              :every {:type zen/symbol
                                                      #_#_:tags #{#{zen.fhir/base-schema zen.fhir/profile-schema}}}}}} ;; TODO
         :zen.fhir/value-set {:type zen/map
                              :keys {:symbol {:type zen/symbol}
                                     :strength {:type zen/keyword
                                                :enum [{:value :required}
                                                       {:value :extensible}
                                                       {:value :preferred}
                                                       {:value :example}]}}}
         :keys {:type zen/map
                :values {:confirms #{nested-schema}}}
         :every {:confirms #{nested-schema}}
         :slicing {:type zen/map
                   :keys {:slices
                          {:type zen/map
                           :values {:type zen/map
                                    :keys {:schema {:confirms #{nested-schema}}}}}}}}}

 structure-schema
 {:zen/tags #{zen/schema zen/tag}
  :confirms #{nested-schema version}
  :require #{:zendoc :zen.fhir/type :zen.fhir/profileUri}
  :type     zen/map
  :keys     {:zendoc {:type zen/string}
             :zen.fhir/type {:type zen/string}
             :zen.fhir/href {:type zen/string}
             :zen.fhir/abstract {:type zen/boolean}
             :zen.fhir/status {:type zen/string
                               :enum [{:value "active"}
                                      {:value "draft"}
                                      {:value "retired"}
                                      {:value "unknown"}]}
             :zen.fhir/kind {:type zen/string
                             :enum [{:value "primitive-type"}
                                    {:value "complex-type"}
                                    {:value "resource"}
                                    {:value "logical"}]}
             :zen.fhir/profileUri {:type zen/string}
             :zen.fhir/id {:type zen/string}
             :zen.fhir/name {:type zen/string}
             :zen.fhir/constraint {:type zen/vector
                                   :every {:type zen/map
                                           :require #{:key :severity :human}
                                           :keys {:key {:type zen/string}
                                                  :requirements {:type zen/string}
                                                  :severity {:type zen/string
                                                             :enum [{:value "error"}
                                                                    {:value "warning"}]}
                                                  :human {:type zen/string}
                                                  :expression {:type zen/string}
                                                  :xpath {:type zen/string}
                                                  :source {:type zen/string}}}}}}

 base-schema
 {:zen/tags #{zen/schema zen/tag}
  :zen/desc "This schema should be used to validate all resources of its type"
  :confirms #{structure-schema}
  :type     zen/map
  :require  #{:zen.fhir/type}}

 profile-schema
 {:zen/tags #{zen/schema zen/tag}
  :zen/desc "This schema should be used only when mentioned in meta.profile"
  :confirms #{structure-schema}
  :type     zen/map
  :require  #{:zen.fhir/profileUri}}

 extension
 {:zen/tags #{zen/schema zen/tag}
  :zen/desc "Extension"
  :confirms #{structure-schema}
  :type     zen/map
  :require  #{:zen.fhir/profileUri}}

 lab-group
 {:zen/tags #{zen/schema zen/tag}
  :zen/desc "Лабораторная группа"}

 adm-group
 {:zen/tags #{zen/schema zen/tag}
  :zen/desc "Административная группа"}

 diag-group
 {:zen/tags #{zen/schema zen/tag}
  :zen/desc "Клиническая группа"}

 support
 {:zen/tags #{zen/schema zen/tag}
  :zen/desc "Методические материалы"}

 search
 {:zen/tags #{zen/schema zen/tag}
  :zen/desc "This symbol defines search on a FHIR resource type"
  :type zen/map
  :keys {:fhir/id {}
         :fhir/url {}
         :fhir/type {}
         :name {}
         :expr {:type zen/map
                :key {:type zen/keyword}
                :values {:type zen/map
                         :keys
                         {:knife {}
                          :jsonpath {:type zen/vector
                                     :every {:type zen/string}}
                          :template {}
                          :data-types {:type zen/set}
                          :sql {:type zen/map
                                :keys {:where {}
                                       :parameter-format {}
                                       :order-by {}}}}}}}}}
