^hide
:menu-order 101

^hide
:icon [:fa :fa-graduation-cap] 

:title "Zen Profiling"

^badge
:editors [people.alexandra people.varvara]

^badge
:date:updated "2022-07-03"

^title "Оглавление"
:content-list md/ 

:toc


^title "Введение в Zen"
:zen-intro md/

Краткое введение в Zen

:zen-intro:project md/

Zen-проект - это папка, в которой каждый файл - это **namespace**.
Имя **namespace** можно получить, заменив `/` на `.` в относительном пути файла.

Например, `fhir/ru/patient.edn` => `fhir.ru.patient`.


:zen-intro:namespace md/

**namespace** - это структура данных в формате [edn](https://github.com/edn-format/edn),
а точнее это всегда **map** (словарь, объект), состоящий из ключей и значений.

Почитать про типы данных [edn](https://learnxinyminutes.com/docs/edn/).

```code edn
{ns fhir.ru.patient

 import #{fhir.v4}

 Patient
 {:zen/tags #{zen/schema}
  :confirms #{fhir.v4/Patient}
  :type zen/map
  :keys {}
  }

 Race
 {:zen/tags #{zen/schema}
  :type zen/map
  :keys {}
  }

 }
```

Ключ задает имя **модели**, а значение - это ее описание. Модели могут ссылаться друг на друга в рамках namespace просто по имени `Patient`, а между namespace - по полному имени `fhir.ru.patient/Patient`. 

Zen явно управляет зависимостями, поэтому для того, чтобы ссылаться на модели из других namespace, вам нужно сделать `import`.

Дополнительно, в файле `zendoc/zrc/fhir/ru/core.edn` необходимо прописать все созданные неймспейсы.

Пример:

```code edn
{ns fhir.ru.core
 import #{fhir.ru.core.organization
          fhir.ru.core.patient
          fhir.ru.core.encounter
          fhir.ru.core.address
          fhir.ru.core.department
          fhir.ru.core.practitioner
          fhir.ru.diag.nosology
          fhir.ru.diag.nu
          fhir.ru.diag.encounter
          fhir.ru.lab.diagnosticreport
          fhir.ru.core.vs-nsi-gender
          fhir.ru.core.ext-nsi-gender}}
```          

^title "Модели"
:zen-intro:models md/

Модель в zen в общем случае - это произвольная структура данных.
Модель может быть протэгирована с помощью аттрибута `:zen/tags #{}`, значением которого является множество
символов, ссылающихся на другие модели. Тэги можно воспринимать как множественную классификацию - типы модели.

^title "Схема"
:zen-intro:schema md/

Zen имeет встроенный язык схем для описания структуры данных.

Модель интерпретируется как схема, если она имеет тэг `zen/schema`.

^title "Профиль на ресурс"
:zen-intro:resource-profile md/

Профили и другие артефакты создаются в папке `zrc/fhir\ru` в соответствующей подпапке, например `core`, `diag`, `lab`, в виде файла с расширением `.edn`.

В начале указываем неймспейс в соответствии с путем до нашего файла. Например если путь `zrc/fhir/ru/core/observation.edn`, значит ns будет `fhir.ru.core.observation`.

Дальше нужно указать импортируемые неймспейсы:

* `fhir` - определения FHIR-ресурсов, расширений, типов данных в виде zen-схем в файле `zrc/fhir.edn` (импортируем всегда),
* `zen.fhir` - дополнительные схемы и определения zen-тегов, находящиеся в файле `zrc/zen/fhir.edn` (импортируем всегда),
* другие неймспейсы, на которые мы ссылаемся внутри нашей схемы.

Затем указываем символ - название нашей схемы в соответствии с принятыми соглашениями по наименованию схем, и саму схему.

`:zen/tags` - это список схем, которым должна соответствовать наша схема. Если наша схема не соответствует задекларированным тегам, то мы увидим ошибки схемы на табе проверки схемы `Schema errors`.

В схеме обязательно нужно указать теги `:zen/tags`:
- `zen/schema` - указываем всегда
- `zen.fhir/profile-schema` - для профилей на ресурсы
- `zen.fhir/structure-schema` - для определений расширений
- `zen.fhir/extension` - для расширений, для автоматической генерации списков артефактов

`:type zen/map` - указываем всегда, это тип нашей схемы

`:zendoc` - ссылка на страницу документации (файл с расширением `.zd`) в нотации Zendoc. Эту ссылку можно скопировать в адресной строке браузера, открыв на сайте соотствующую страницу. 

`:zen/desc` - текстовое описание схемы

`:confirms` - список наследуемых схем. При валидации, экземпляр ресурса будет проверен на соответствие нашей схеме плюс всем перечисленным здесь схемам.

`:zen.fhir/version` - версия zen, сейчас "0.5.8"

`:zen.fhir/id` - соответствует StructureDefinition.id

`:zen.fhir/name` - соответствует StructureDefinition.name

`:zen.fhir/type` - соответствует StructureDefinition.type

`:zen.fhir/profileUri` - соответствует StructureDefinition.url

`:keys` - список элементов ресурса/типа данных, для которых мы хотим ввести ограничения или расширения

Пример определения профиля на ресурс Observation:

```code edn
{ns fhir.ru.core.observation

 import #{fhir
          zen.fhir
          fhir.ru.core.patient
          fhir.ru.core.practitioner
          fhir.ru.core.encounter}

 CoreObservation
 {:zen/tags #{zen.fhir/profile-schema zen/schema} 
  :type zen/map
  :zendoc 'core.Observation
  :zen/desc "Результат наблюдения"
  :confirms #{fhir/Observation}
  :zen.fhir/version "0.5.8"
  :zen.fhir/id "core-observation"
  :zen.fhir/name "CoreObservation"
  :zen.fhir/type "Observation"
  :zen.fhir/profileUri "http://fhir.ru/core/sd/core-observation"
  :keys {:subject {:confirms #{fhir.ru.core.patient/CorePatient}}
         :encounter {:confirms #{fhir.ru.core.encounter/CoreEncounter}}
         :performer {:confirms #{fhir.ru.core.practitioner/CorePractitioner fhir.ru.core.practitioner/CorePractitionerRole}}}}}
```

^title "Инструкция"
:tutorial md/

Задача: определить профиль для ресурса `Пациент`, добавив для атрибута `Пол` расширение для кодирования по справочнику ФНСИ.

^title "Naming System"
:tutorial:namingsystem md/

Почему NamingSystem, а не CodeSystem - см. systems#:mindmap.

1) Создаём определение NamingSystem для справочника ФНСИ - "Пол пациента" (https://nsi.rosminzdrav.ru/#!/refbook/1.2.643.5.1.13.13.11.1040):

* в папке `docs/systems` создаем файл, название которого соответствует пункту "терминологии" соглашения conventions.
* в файле по шаблону ____________ заполняем атрибуты. В данном случае кроме своего идентификатора даем ссылку на OID НСИ ЕГИСЗ
* получаем следующий текст:

```code json
{
  "id": "core-ns-nsi-gender",
  "resourceType": "NamingSystem",  
  "status": "active",    
  "kind": "codesystem",
  "name": "CoreNsiGender",
  "description": "НСИ Минздрава Пол пациента",
  "text": {
    "div": "<div xmlns='http://www.w3.org/1999/xhtml'>CodeSystem: НСИ Минздрава Пол пациента, 
    может быть известен под следующими идентификаторами:<ol>\n    <li>OID: 1.2.643.5.1.13.13.11.1040</li>\n   
     <li>[предпочтительно] URI: http://fhir.ru/core/systems/gender</li>\n  </ol>\n</div>",
    "status": "generated"
  },
  "uniqueId": [
    {
      "type": "oid",
      "value": "1.2.643.5.1.13.13.11.1040"
    },
    {
      "type": "uri",
      "preferred": true,
      "value": "http://fhir.ru/core/systems/gender",
    }
  ]
}
```code

* результат на нашем сайте: systems.cs-rosminzdrav-gender
* прототип в инструментах FHIR - [[a https://docs.miramedix.ru/fhir/IG/CodeSystem-nsi-cs-1-2-643-5-1-13-13-11-1040.html]]

^title "ValueSet"
:tutorial:valueset md/

2) Создаём определение набора значений из этого справочника:

```code json
{
  "resourceType": "ValueSet",
  "id": "core-vs-administrative-gender",
  "name": "CoreVsAdministrativeGender",
  "title": "Core ValueSet Пол пациента (FHIR AdministrativeGender)",
  "url" : "http://fhir.ru/core/vs/core-vs-administrative-gender",
  "status": "active",
  "compose": {
    "include": [
      {
        "system": "http://hl7.org/fhir/administrative-gender",
        "concept": [
          {
            "code": "male"
          },
          {
            "code": "female"
          },
          {
            "code": "unknown"
          }
        ]
      }
    ]
  }
}
```code

* результат на нашем сайте: valuesets.vs-administrative-gender
* прототип в инструментах FHIR - [[a https://docs.miramedix.ru/fhir/IG/ValueSet-nsi-vs-1-2-643-5-1-13-13-11-1040.html]]

^title "Extension"
:tutorial:extension md/

* 3) Создаём определение расширения для кодирования пола пациента по справочнику ФНСИ:

```code edn
{ns fhir.ru.core.ext-nsi-gender

 import #{fhir zen.fhir fhir.ru.core.vs-nsi-gender/CoreVsNsiGender}

 CoreNsiGender
 {:zen/tags #{zen/schema zen.fhir/structure-schema zen.fhir/extension}
  :zen.fhir/type "Coding"
  :zen.fhir/profileUri "http://fhir.ru/core/sd/core-ex-nsi-gender"
  :type zen/map
  :zen/desc "Кодирование пола по справочнику ФНСИ"
  :zen.fhir/version "0.5.8"
  :confirms #{fhir/Coding}
  :zen.fhir/value-set
  {:symbol fhir.ru.core.vs-nsi-gender/CoreVsNsiGender
   :strength :required}
  :require #{:url :valueCoding}
  :keys {:url {:zen/desc "http://fhir.ru/core/sd/core-ex-nsi-gender"
               :confirms #{fhir/uri}}
         :valueCoding  {:type zen/map
                        :confirms #{fhir/Coding}
                        :zen/desc "Значение из справочника https://nsi.rosminzdrav.ru/#!/refbook/1.2.643.5.1.13.13.11.1040"
                        :require #{:system :code :display}
                        :keys {:system {:zen/desc "http://hl7.org/fhir/administrative-gender"
                                        :confirms #{fhir/uri}}
                               :code {:confirms #{fhir/code}
                                      :zen/desc "Код"}
                               :display {:zen/desc "Значение для отображения"
                                         :confirms #{fhir/string}}}}}

  :zendoc 'extension.ext-nsi-gender}}
```
* и страницу для вывода схемы и дополнительной документации - в папке `docs/extension` создаем файл с расширением `.zd`, название которого соответствует пункту "терминологии" соглашения conventions.
* результат на нашем сайте: extension.ext-nsi-gender
* прототип в инструментах FHIR - [[a https://docs.miramedix.ru/fhir/IG/StructureDefinition-fhir-ru-ext-nsi-gender.html]]

^title "Profile"
:tutorial:profile md/

* 4) Создаём профиль для ресурса `Пациент` с добавленным расширением для кодирования пола пациента по справочнику ФНСИ:

```
[todo]
```

результат - [[a https://docs.miramedix.ru/fhir/IG/StructureDefinition-fhir-ru-patient-gender.html]]

:tutorial:example md/

* 5) Создаём пример ресурса, соответствующего данному профилю:

^tabs
:tabs-example
^tab-title
~:json:title "JSON"
^tab-content
~:json:content md/

```code json
{
  "name": [
    {
      "use": "official",
      "given": [
        "BARBARA",
        "A"
      ],
      "family": "KENNEDY"
    }
  ],
  "gender": "female",
  "_gender": {
    "nsiGender": {
      "system": "http://fhir.ru/core/systems/nsi-gender",
      "code": "2",
      "display": "Женский"
    }
  },
  "birthDate": "1961-03-03",
  "address": [
    {
      "city": "Москва",
      "line": [
        "Арбат"
      ],
      "state": "MO",
      "country": "РФ",
      "postalCode": "64083"
    }
  ]
}
```

^tab-title
~:yaml:title "YAML"
^tab-content
~:yaml:content md/

```code yaml
name:
  - use: official
    given:
      - BARBARA
      - A
    family: KENNEDY
gender: female
_gender:
  nsiGender:
    system: "http://fhir.ru/core/systems/nsi-gender"
    code: "2"
    display: Женский
birthDate: "1961-03-03"
address:
  - city: Москва
    line:
      - Арбат
    state: MO
    country: РФ
    postalCode: "64083"
```

результат - https://docs.miramedix.ru/fhir/IG/Patient-fhir-ru-patient-instance-konstantinopolskaya-gender.html

^title "Валидация"
:tutorial:validation md/

* 6) Проверяем пример ресурса на соответстветствие данному профилю (валидация на табе Validate):

^title "Validation"
^zen/schema
:tutorial:validation:profile-validation fhir.ru.core.tutorial-patient/TutorialPatient
