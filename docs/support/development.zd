:title "Разработка проекта"

^hide
:icon [:fa :fa-laptop-code] 

^hide
:menu-order 4

^badge
:editors #{people.alexandra}

^badge
:status "in progress"

^title "Оглавление"
:content-list md/ 

:toc

^title "Разработка проекта"
:project md/

^title "Для тех, кто редактирует прямо на гитхабе"
:project:lifehack md/

Можно найти в репозитории нужный файл и нажать на клавиатуре клавишу с точкой (.), откроется редактор VSCode прямо в браузере.

Там можно внести необходимые изменения в один или несколько файлов проекта и закоммитить их на третьей вкладке в левой навигации.

^img
:project:lifehack:git-file "img/git-file.png"

^img
:project:lifehack:open-in-web-vscode "img/open-in-web-vscode.png"

^img
:project:lifehack:commit-push "img/commit-push.png"

^title "Пререквизиты"
:project:prerequisites md/

Необходимо поставить себе:
* [Docker](https://docs.docker.com/desktop/windows/install/)
* [VSCode](https://code.visualstudio.com/)
* [npm](https://nodejs.org/en/download/): см. [How to Install](https://radixweb.com/blog/installing-npm-and-nodejs-on-windows-and-mac) или [How to Install](https://phoenixnap.com/kb/install-node-js-npm-on-windows)
* Склонировать себе [проект](https://github.com/fhir-ru/zendoc/):

```code bash
git clone git@github.com:fhir-ru/zendoc.git
```

либо так, если хотите переименовать папку `zendoc` например в `fhir-ru`:

```code bash
git clone git@github.com:fhir-ru/zendoc.git fhir-ru
```

^title "Запуск проекта локально через docker-compose"
:project:local md/

* Запустить Docker
* Зайти в папку проекта:

```code bash
cd zendoc
```
или 

```code bash
cd fhir-ru
```

* Инициализировать сабмодули:

```code bash
git submodule init
git submodule update --recursive
```

Установить node_modules с файлами стандарта FHIR, выполнив из папки zrc:

```code bash
cd zrc
npm install
```

* Открыть проект в VSCode с помощью команды в терминале:

```code bash
code ./
```

* В VSCode перейти в терминал и запустить команду:

```code bash
docker-compose up -d
```

либо с логами:

```code bash
docker-compose logs -f
```

* Когда процесс выполнится (может занять где-то до 5 минут, можно смотреть по логам докера, как идет процесс), открыть в браузере страницу [http://localhost:3333/](http://localhost:3333/)
* Внести изменения в файлы проекта, рефрешнуть страницу в браузере (F5)

* Если необходимо, остановить докер можно командой:

```code bash
docker-compose stop
```

^title "Обновление проекта до последней версии"
:project:update md/

* Просто скачать изменения без мержа:

```code bash
git fetch
```

* Просмотреть изменения файлов (статистику) на сервере по сравнению с вашей версией:

```code bash
git diff --stat origin/main..main
```

* Просмотреть изменения кода на сервере по сравнению с вашей версией:

```code bash
git diff origin/main..main
```

* Скачать и установить последнюю версию:

```code bash
git pull --ff-only
```

**Ключ `--ff-only` позволяет сделать pull, только если возможен автоматический мерж изменений ваших и на сервере, и прерывает выполнение команды, если есть конфликты.

либо так: 

```code bash
git pull
```

* Можно посмотреть изменения между двумя коммитами, например последним и предпоследним:

```code bash
git diff main..main~1
```

* Обновить сабмодули:

```code bash
git submodule update --recursive
```

* Рестартануть докер-контейнер:

^title "Отправка ваших изменений на сервер"
:project:commit md/

Сначала обязательно обновить сабмодули.

```code bash
git submodule update --recursive
```

Получить список ваших изменений:

```code bash
git status
```

Краткая форма проверки статуса:

```code bash
git status -bs
```

Посмотреть статистику ваших текущих изменений:

```code bash
git diff --stat
```

В списке ваших изменений не должно быть `modified:   libs/zd (modified content)`.

Скачать последнюю версию, чтобы избежать мержа:

```code bash
git pull --ff-only
```

Добавление всех ваших измененных и новых файлов к коммиту:

```code bash
git add .
```

либо можно добавить к коммиту только модифицированные файлы:

```code bash
git add -u
```

Можно добавлять в коммит изменения из файла по частям:

```code bash
git add -p
```

Если хотите убрать файлы из коммита, воспользуйтесь командой:

```code bash
git reset head
```

Дать наименование коммиту:

```code bash
git commit -m "Ваш текст-пояснение к коммиту"
```

Отправить ваш коммит на сервер:

```code bash
git push
```

Если нужно временно спрятать свои локальные изменения, например в случае конфликтов, когда нужно забрать изменения с сервера:

```code bash
git stash
```

Достать спрятанные изменения обратно, например после успешного пулла:

```code bash
git stash apply
```

^title "Дополнительная настройка редактора VSCode"
:project:vscode md/

Для вашего удобства можно настроить редактор VSCode:

* Автоматическое сохранение изменений:

открыть `Settings` / `Auto Save` и выбрать опцию `onFocusChange`.

* Автоматическое форматирование:

поставить расширения Prettier и Formatting Toggle. 

* VSCode prevent file Explorer from jumping:

"explorer.autoReveal": false

^title "Обязательные расширения VSCode"
:project:vscode-extensions md/

```
Name: zendoc
Id: zendoc-vs.zendoc
Description: semantic wiki syntax
Version: 0.0.1
Publisher: zendoc-vs
VS Marketplace Link: https://marketplace.visualstudio.com/items?itemName=zendoc-vs.zendoc

Name: zen-lsp
Id: zen-lang.zen-lsp
Description: 
Version: 0.0.3
Publisher: zen-lang
VS Marketplace Link: https://marketplace.visualstudio.com/items?itemName=zen-lang.zen-lsp
```

^collapse
^title "Список расширений VSCode, которые могут пригодиться"
:project:vscode-extensions-optional md/

```
Name: TabOut
Id: albert.TabOut
Description: Tab out of quotes, brackets, etc
Version: 0.2.1
Publisher: Albert Romkes
VS Marketplace Link: https://marketplace.visualstudio.com/items?itemName=albert.TabOut

Name: Prettier - Code formatter
Id: esbenp.prettier-vscode
Description: Code formatter using prettier
Version: 9.5.0
Publisher: Prettier
VS Marketplace Link: https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode

Name: Formatting Toggle
Id: tombonnike.vscode-status-bar-format-toggle
Description: A VS Code extension that allows you to toggle formatting settings ON and OFF with a simple click.
Version: 3.0.0
Publisher: tombonnike
VS Marketplace Link: https://marketplace.visualstudio.com/items?itemName=tombonnike.vscode-status-bar-format-toggle

Name: cljfmt
Id: pedrorgirardi.vscode-cljfmt
Description: Format Clojure & EDN.
Version: 1.3.0
Publisher: Pedro Girardi
VS Marketplace Link: https://marketplace.visualstudio.com/items?itemName=pedrorgirardi.vscode-cljfmt

Name: Calva: Clojure & ClojureScript Interactive Programming
Id: betterthantomorrow.calva
Description: Integrated REPL, formatter, Paredit, and more. Powered by cider-nrepl and clojure-lsp.
Version: 2.0.287
Publisher: Better Than Tomorrow
VS Marketplace Link: https://marketplace.visualstudio.com/items?itemName=betterthantomorrow.calva

Name: Bookmarks
Id: alefragnani.Bookmarks
Description: Mark lines and jump to them
Version: 13.3.0
Publisher: Alessandro Fragnani
VS Marketplace Link: https://marketplace.visualstudio.com/items?itemName=alefragnani.Bookmarks
```

^title "Запуск проекта под Windows WSL2"
:windows-wsl2 md/

Кроме запуска проекта под Windows в докере, проект можно запустить в WSL - Windows Subsystem for Linux.
Для этого сначала необходимо [поставить WSL2](https://docs.microsoft.com/ru-ru/windows/wsl/install), [задать пользователя и пароль](https://docs.microsoft.com/ru-ru/windows/wsl/setup/environment#set-up-your-linux-username-and-password), [поставить расширение для VSCode](https://docs.microsoft.com/ru-ru/windows/wsl/tutorials/wsl-vscode).

Также можно поставить Ubuntu на Windows через Microsoft Store.

Найти в Microsoft Store и поставить Windows Terminal.

Запустить Windows Terminal, в нем в панели меню выбрать в выпадающем списке Ubuntu, продолжить работу в этом терминале.


[Поставить java](https://medium.com/@pierre.viara/install-java-on-windows-10-linux-subsystem-875f1f286ee8)

Install Java in the terminal with: sudo apt install openjdk-11-jdk

[Поставить clojure](https://dev.to/mrispoli24/setup-clojure-on-windows-wsl-5fhb)

Install leiningen with apt-get: sudo apt-get install leiningen

[Поставить babashka](https://github.com/babashka/babashka#installation)

`bash < <(curl -s https://raw.githubusercontent.com/babashka/babashka/master/install)`

[Поставить gh cli](https://github.com/cli/cli/blob/trunk/docs/install_linux.md)  для удобства работы с гитом.

`curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg`

`sudo apt install gh`

`gh auth login`

авторизоваться на GitHub, ввести код (First copy your one-time code)

Сгенерировать ssh-ключ.

Склонировать репозиторий проекта 

`gh repo clone fhir-ru/zendoc`

`cd zendoc/`

`git submodule init`

`git submodule update --recursive``

Установить node_modules с файлами стандарта FHIR, выполнив из папки zrc:

`cd zrc`

`npm install`

`cd ..`

Открыть проект в VSCode:

`code .`

Если при выполнении каких-то команд консоль будет ругаться, то поставить недостающие программы или зависимости.
