^hide
:menu-order 4

^hide
:icon [:fa :fa-graduation-cap] 

:title "FHIR-профилирование на Zen-lang"

^badge
:editors #{people.alexandra people.varvara}

^badge
:date:updated "2022-09-30"

^title "Оглавление"
:content-list md/ 

:summary md/

zen.fhir is a zen-lang namespace that is used in all packages generated by zen-fhir tool.

zen.fhir extends zen/schema to allow describing FHIR-specific info such as bindings, references, extensions, etc.

:toc

^title "How to"
:how-to md/

This section contains examples of describing FHIR constraints with zen.

Examples use this namespace:

```code edn
{:ns fhir
 :alias hl7-fhir-r4-core}
```

The namespace aliases FHIR R4 definitions as just fhir allowing you later to replace this alias to hl7-fhir-r4b-core or to hl7-fhir-r5-core and thus migrate your profiles to a newer FHIR core.


Another common thing is :zen.fhir/version property of schemas. It defines which zen.fhir syntax version your schema will use. Currently, schemas are required to specify the version and the current version is ~:zen.fhir/version “0.5.0”~. In the future, this property may be deprecated in a backward-compatible way.

^title "describe a profile on"
:how-to:describe-profile md/

^title "existing FHIR resource type"
:how-to:describe-profile:existing-resource md/

Create a schema with the zen.fhir/profile-schema tag. The schema must contain :zen.fhir/profileUri, which will be referenced by resources with meta.profile property. Here’s an example of a profile on the Patient resource type:

```code edn
{:ns MyProfiles
 :import #{zen.fhir fhir}

 MyPatientProfile
 {:zen/tags #{zen/schema zen.fhir/profile-schema}
  :zen.fhir/version "0.5.0"
  :zen.fhir/profileUri "urn:fhir:extension:MyPatientProfile"
  :confirms #{fhir/Patient}}}
```

Note the :confirms #{fhir/Patient} part: it means that the data which will be validated by your schema also should be validated by the base Patient schema.

^title "existing FHIR profile"
:how-to:describe-profile:existing-profile md/

This is done in the same way as adding a profile on a existing FHIR resource type but you need to set :confirms to a profile instead of a base schema

```code edn
MyPatientProfileOnAProfile
{:zen/tags #{zen/schema zen.fhir/profile-schema}
 :zen.fhir/version "0.5.0"
 :zen.fhir/profileUri "urn:fhir:extension:MyPatientProfileOnAProfile"
 :confirms #{MyPatientProfile}}
```

^title "existing FHIR data type"
:how-to:describe-profile:existing-datatype md/

TODO

^title "describe a constraint"
:how-to:describe-constraint md/

When you have a symbol with the zen.fhir/profile-schema tag you can describe constraints. The important thing to keep in mind is that :confirms property is not an inheritance. Your schema doesn’t implicitly receive any properties from schemas mentioned in :confirms. The effect of this is that to describe a constraint you need to explicitly describe some data types and your data structure. The next example will illustrate this.

^title "require (cardinality 1..x)"
:how-to:describe-constraint:require md/

In zen-lang to require a key to be present you need to set a :require property. Here’s the updated example of the profile on the Patient resource type with :active and :name keys required:

```code edn
MyPatientProfile
{:zen/tags #{zen/schema zen.fhir/profile-schema}
 :zen.fhir/version "0.5.0"
 :zen.fhir/profileUri "urn:fhir:extension:MyPatientProfile"
 :confirms #{fhir/Patient}
 :type zen/map
 :require #{:active :name}}
```

Note that we had to describe the :type zen/map to use the :require property. Your schema doesn’t implicitly inherit the :type zen/map from the :confirms #{fhir/Patient}. And because :require is a property of the zen/map type you need to specify the type explicitly in your schema.

^title "forbid (cardinality 0..0)"
:how-to:describe-constraint:forbid md/

Currently, there’s no way to forbid using an element in zen-lang. Here’s the issue to track the status of this feature.

^title "min and max elements in an array"
:how-to:describe-constraint:min-max md/

 :type zen/vector provides :minItems and :maxItems properties. Example of limiting a Patient.name to exactly one element:

```code edn
MyPatientProfile
{:zen/tags #{zen/schema zen.fhir/profile-schema}
 :zen.fhir/version "0.5.0"
 :zen.fhir/profileUri "urn:fhir:extension:MyPatientProfile"
 :confirms #{fhir/Patient}
 :type zen/map
 :require #{:name}
 :keys {:name {:type zen/vector
               :minItems 1
               :maxItems 1}}}
```

Setting that a zen/vector has a minimum 1 element does not make a key that stores this value required to be present. We need to explicitly state that the key is also required.

^title "value pattern"
:how-to:describe-constraint:pattern md/

In FHIR profiles, pattern[x] most of the time is used in slicings. :match property of zen/schema allows to describe a pattern matching.


Below is an example defining a pattern to the Observation.code element, the pattern describes that in the :coding array should be at least one object with ~:system “my-system”~ and ~:code “my-code”~:

```code edn
MyObservationProfile
{:zen/tags #{zen/schema zen.fhir/profile-schema}
 :zen.fhir/version "0.5.0"
 :zen.fhir/profileUri "urn:fhir:extension:MyObservationProfile"
 :confirms #{fhir/Observation}
 :type zen/map
 :keys {:code {:match {:coding #{{:system "my-system", :code "my-code"}}}}}}
```

 `:match` pattern matching syntax is a recursive data structure that consists of several parts:


* `{}` contains keys and their patterns applied to an object, each key from the `{}` should be present in the object and match the pattern. The object may contain any extra keys not mentioned in the pattern.
* `#{}` contains patterns applied to arrays, for each pattern from the `#{}` there should be at least one match in a data array. The array may contain any other elements not matched by the pattern.
* any other primitive value means that data should be a constant value

Break down of the example above:


1) The pattern is `{:coding #{{:system "my-system", :code "my-code"}}}`;
1) Top level of the pattern is `{:coding ...}`, it expects data to be an object containing key :coding;
1) To a value of the key :coding the pattern `#{{:system ...}}` is applied;
1) The `#{}` syntax expects the data to be an array containing at least one match to the pattern `{:system "my-system", :code "my-code"}`;
1) `{:system "my-system", :code "my-code"}` expects data to be an object containing keys :system and :code with values “my-system” and “my-code” respectively.

^title "fixed value"
:how-to:describe-constraint:fixed md/

To define a fixed value use :const property of zen/schema allows to describe a constant value. The same way as patterns, value[x] most of the times is used in slicings and also to set an extension URL. Zen FHIR offers first-class extensions instead, in case you want to define an extension refer to the extension example. Here’s an example setting a value of the Observation.status element to be always final if it is present:

```code edn
MyObservationProfile
{:zen/tags #{zen/schema zen.fhir/profile-schema}
 :zen.fhir/version "0.5.0"
 :zen.fhir/profileUri "urn:fhir:extension:MyObservationProfile"
 :confirms #{fhir/Observation}
 :type zen/map
 :keys {:status {:const {:value "final"}}}}
```

^title "slicing on an array"
:how-to:describe-constraint:slicing md/

TODO

^title "binding to a value set"
:how-to:describe-constraint:binding md/

TODO

^title "invariant"
:how-to:describe-constraint:invariant md/

TODO

^title "describe a constraint to a nested element"
:how-to:describe-constraint-nested md/

TODO

^title "describe an extension"
:how-to:describe-extension md/

TODO

^title "of primitive type"
:how-to:describe-extension:primitive md/

TODO

^title "of complex type"
:how-to:describe-extension:complex md/

TODO

^title "with nested extension"
:how-to:describe-extension:nested-extension md/

TODO

^title "constraint"
:how-to:describe-extension:constraint md/

TODO

^title "add an extension to a profile"
:how-to:add-extension md/

TODO

^title "describe a new value set"
:how-to:new-valueset md/

TODO

^title "constraint some existing value set or code system"
:how-to:constraint-existing-valueset md/

TODO

^title "describe arbitrary resource"
:how-to:add-arbitrary-resource md/

TODO