^hide
:menu-order 4

^hide
:icon [:fa :fa-graduation-cap] 

:title "FHIR-профилирование на Zen-lang"

^badge
:editors #{people.alexandra people.varvara}

^badge
:date:updated "2022-09-30"

^title "Оглавление"
:content-list md/ 

:summary md/

zen.fhir - это пространство имен языка zen-lang, которое используется во всех пакетах, сгенерированных инструментом zen-fhir.

zen.fhir расширяет zen/schema, давая возможность описывать специфичные для FHIR вещи, такие как привязки, ссылки, расширения.

:toc

^title "Как"
:how-to md/

В этой секции приведены примеры описания ограничений FHIR на zen.

В примерах используется это пространство имен:

```code edn
{:ns fhir
 :alias hl7-fhir-r4-core}
```

Это пространство имен вводит псевдонимы для определений FHIR R4 как просто fhir, что позволит позже заменить этот псевдоним на hl7-fhir-r4b-core или на hl7-fhir-r5-core и, таким образом, перенести свои профили на более новую версию FHIR.


Другой распространенной вещью является свойство :zen.fhir/version схем. Оно определяет, какую версию синтаксиса zen.fhir будет использовать ваша схема. В настоящее время указание версии в схемах является обязательным, текущая версия — :zen.fhir/version "0.5.0". В будущем это свойство может быть объявлено устаревшим с соблюдением обратной совместимости.

^title "описать профиль на"
:how-to:describe-profile md/

^title "существующий FHIR тип ресурса"
:how-to:describe-profile:existing-resource md/

Создайте схему с тегом `zen.fhir/profile-schema`. Эта схема должна содержать :zen.fhir/profileUri, по которому на него будут ссылаться ресурсы в атрибуте meta.profile. Вот пример профиля на тип ресурса Patient:

```code edn
{:ns MyProfiles
 :import #{zen.fhir fhir}

 MyPatientProfile
 {:zen/tags #{zen/schema zen.fhir/profile-schema}
  :zen.fhir/version "0.5.0"
  :zen.fhir/profileUri "urn:fhir:extension:MyPatientProfile"
  :confirms #{fhir/Patient}}}
```

Обратите внимание на часть :confirms #{fhir/Patient}, она означает, что данные, которые будут валидироваться на соответствие вашей схеме, также будут проверены на соответствие базовому типу ресурса Patient.

^title "существующий FHIR-профиль"
:how-to:describe-profile:existing-profile md/

Профиль создается таким же способом, как и на существующий тип ресурса, однако в элементе :confirms необходимо указать схему профиля вместо схемы базового типа ресурса.

```code edn
MyPatientProfileOnAProfile
{:zen/tags #{zen/schema zen.fhir/profile-schema}
 :zen.fhir/version "0.5.0"
 :zen.fhir/profileUri "urn:fhir:extension:MyPatientProfileOnAProfile"
 :confirms #{MyPatientProfile}}
```

^title "существующий тип данных FHIR"
:how-to:describe-profile:existing-datatype md/

TODO

^title "описать ограничение"
:how-to:describe-constraint md/

Если у схемы есть тег zen.fhir/profile-schema, то в ней можно описывать огарничения. Следует понимать, что свойство :confirms не являлется наследованием. Ваша схема не получает неявно никаких свойств из схем, указанных в :confirms. В результате, для описания ограничения вам необходимо явно описать типы и структуру данных. Следующий пример проиллюстрирует это. 

^title "require (cardinality 1..x)"
:how-to:describe-constraint:require md/

В zen-lang, чтобы требовать наличие ключа, вам нужно установить свойство :require. Вот обновленный пример профиля для типа ресурса Patient с обязательными ключами :active и :name:

```code edn
MyPatientProfile
{:zen/tags #{zen/schema zen.fhir/profile-schema}
 :zen.fhir/version "0.5.0"
 :zen.fhir/profileUri "urn:fhir:extension:MyPatientProfile"
 :confirms #{fhir/Patient}
 :type zen/map
 :require #{:active :name}}
```

Обратите внимание, что нам пришлось описать :type zen/map, чтобы использовать свойство :require. Ваша схема не наследует неявно :type zen/map от :confirms #{fhir/Patient}. И поскольку :require является свойством типа zen/map, вам необходимо явно указать тип в вашей схеме.

^title "forbid (cardinality 0..0)"
:how-to:describe-constraint:forbid md/

В настоящее время нет возможности запретить использование элемента в zen-lang. Вот ссылка на задачу, чтобы отслеживать её статус.

^title "min and max elements in an array"
:how-to:describe-constraint:min-max md/

 :type zen/vector предоставляет свойства :minItems и :maxItems. Пример ограничения Patient.name ровно одним элементом:

```code edn
MyPatientProfile
{:zen/tags #{zen/schema zen.fhir/profile-schema}
 :zen.fhir/version "0.5.0"
 :zen.fhir/profileUri "urn:fhir:extension:MyPatientProfile"
 :confirms #{fhir/Patient}
 :type zen/map
 :require #{:name}
 :keys {:name {:type zen/vector
               :minItems 1
               :maxItems 1}}}
```

Указание того, что zen/vector имеет минимум 1 элемент, не делает ключ, который хранит это значение, обязательным для присутствия. Нам нужно явно указать, что ключ также требуется.

^title "value pattern"
:how-to:describe-constraint:pattern md/

В профилях FHIR pattern[x] чаще всего используется в срезах. Свойство :match из zen/schema позволяет описать сопоставление с образцом.

Ниже приведен пример определения шаблона для элемента Observation.code, шаблон описывает, что в массиве :coding должен быть хотя бы один объект с ~:system “my-system”~ и ~:code “my-code”~:

```code edn
MyObservationProfile
{:zen/tags #{zen/schema zen.fhir/profile-schema}
 :zen.fhir/version "0.5.0"
 :zen.fhir/profileUri "urn:fhir:extension:MyObservationProfile"
 :confirms #{fhir/Observation}
 :type zen/map
 :keys {:code {:match {:coding #{{:system "my-system", :code "my-code"}}}}}}
```

Синтаксис сопоставления шаблонов `:match` представляет собой рекурсивную структуру данных, состоящую из нескольких частей:

* `{}` содержит ключи и их шаблоны, примененные к объекту, каждый ключ из `{}` должен присутствовать в объекте и соответствовать шаблону. Объект может содержать любые дополнительные ключи, не упомянутые в шаблоне.
* `#{}` содержит шаблоны, применяемые к массивам, для каждого шаблона из `#{}` должно быть хотя бы одно совпадение в массиве данных. Массив может содержать любые другие элементы, не соответствующие шаблону.
* любое другое примитивное значение означает, что данные должны быть постоянным значением

Разбивка приведенного выше примера:

1) The pattern is `{:coding #{{:system "my-system", :code "my-code"}}}`;
1) Top level of the pattern is `{:coding ...}`, it expects data to be an object containing key :coding;
1) To a value of the key :coding the pattern `#{{:system ...}}` is applied;
1) The `#{}` syntax expects the data to be an array containing at least one match to the pattern `{:system "my-system", :code "my-code"}`;
1) `{:system "my-system", :code "my-code"}` expects data to be an object containing keys :system and :code with values “my-system” and “my-code” respectively.

^title "fixed value"
:how-to:describe-constraint:fixed md/

Чтобы определить фиксированное значение, используйте свойство :const из zen/schema, позволяющее описать постоянное значение. Так же, как и шаблоны, value[x] в большинстве случаев используется в срезах, а также для установки URL-адреса расширения. Вместо этого Zen FHIR предлагает расширения первого класса, если вы хотите определить расширение, обратитесь к примеру расширения. Вот пример установки значения элемента Observation.status, которое всегда будет иметь значение final, если оно присутствует:

```code edn
MyObservationProfile
{:zen/tags #{zen/schema zen.fhir/profile-schema}
 :zen.fhir/version "0.5.0"
 :zen.fhir/profileUri "urn:fhir:extension:MyObservationProfile"
 :confirms #{fhir/Observation}
 :type zen/map
 :keys {:status {:const {:value "final"}}}}
```

^title "slicing on an array"
:how-to:describe-constraint:slicing md/

TODO

^title "binding to a value set"
:how-to:describe-constraint:binding md/

TODO

^title "invariant"
:how-to:describe-constraint:invariant md/

TODO

^title "describe a constraint to a nested element"
:how-to:describe-constraint-nested md/

TODO

^title "describe an extension"
:how-to:describe-extension md/

TODO

^title "of primitive type"
:how-to:describe-extension:primitive md/

TODO

^title "of complex type"
:how-to:describe-extension:complex md/

TODO

^title "with nested extension"
:how-to:describe-extension:nested-extension md/

TODO

^title "constraint"
:how-to:describe-extension:constraint md/

TODO

^title "add an extension to a profile"
:how-to:add-extension md/

TODO

^title "describe a new value set"
:how-to:new-valueset md/

TODO

^title "constraint some existing value set or code system"
:how-to:constraint-existing-valueset md/

TODO

^title "describe arbitrary resource"
:how-to:add-arbitrary-resource md/

TODO